# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:01:02+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, constr


class Type(Enum):
    auLocal = 'auLocal'


class AULocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=5, max_length=9) = Field(
        ..., description='The bank account number, without separators or whitespace.'
    )
    bsbCode: constr(min_length=6, max_length=6) = Field(
        ...,
        description='The 6-digit [Bank State Branch (BSB) code](https://en.wikipedia.org/wiki/Bank_state_branch), without separators or whitespace.',
    )
    type: Type = Field(..., description='**auLocal**')


class Status(Enum):
    active = 'active'
    closed = 'closed'
    inactive = 'inactive'
    suspended = 'suspended'


class AllowedLevel(Enum):
    high = 'high'
    low = 'low'
    medium = 'medium'
    notApplicable = 'notApplicable'


class RequestedLevel(Enum):
    high = 'high'
    low = 'low'
    medium = 'medium'
    notApplicable = 'notApplicable'


class VerificationStatus(Enum):
    invalid = 'invalid'
    pending = 'pending'
    rejected = 'rejected'
    valid = 'valid'


class AccountSupportingEntityCapability(BaseModel):
    allowed: Optional[bool] = Field(
        None,
        description='Indicates whether the supporting entity capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.',
    )
    allowedLevel: Optional[AllowedLevel] = Field(
        None,
        description='The capability level that is allowed for the account holder.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.',
    )
    enabled: Optional[bool] = Field(
        None,
        description='Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.',
    )
    id: Optional[str] = Field(None, description='The ID of the supporting entity.')
    requested: Optional[bool] = Field(
        None,
        description='Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.',
    )
    requestedLevel: Optional[RequestedLevel] = Field(
        None,
        description='The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.',
    )
    verificationStatus: Optional[VerificationStatus] = Field(
        None,
        description='The status of the verification checks for the supporting entity capability.\n\nPossible values:\n\n* **pending**: Adyen is running the verification.\n\n* **invalid**: The verification failed. Check if the `errors` array contains more information.\n\n* **valid**: The verification has been successfully completed.\n\n* **rejected**: Adyen has verified the information, but found reasons to not allow the capability.\n',
    )


class ActiveNetworkTokensRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[int] = Field(None, description='The number of tokens.')


class Type1(Enum):
    gbSortCode = 'gbSortCode'
    usRoutingNumber = 'usRoutingNumber'


class AdditionalBankIdentification(BaseModel):
    code: Optional[str] = Field(
        None, description='The value of the additional bank identification.'
    )
    type: Optional[Type1] = Field(
        None,
        description='The type of additional bank identification, depending on the country.\n\nPossible values:\n\n * **gbSortCode**: The 6-digit [UK sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or spaces\n * **usRoutingNumber**: The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or spaces.',
    )


class Address(BaseModel):
    city: constr(max_length=3000) = Field(
        ..., description='The name of the city. Maximum length: 3000 characters.'
    )
    country: str = Field(
        ...,
        description="The two-character ISO-3166-1 alpha-2 country code. For example, **US**.\n> If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.",
    )
    houseNumberOrName: constr(max_length=3000) = Field(
        ...,
        description='The number or name of the house. Maximum length: 3000 characters.',
    )
    postalCode: str = Field(
        ...,
        description='A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.',
    )
    stateOrProvince: Optional[str] = Field(
        None,
        description='The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada.',
    )
    street: constr(max_length=3000) = Field(
        ...,
        description='The name of the street. Maximum length: 3000 characters.\n> The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.',
    )


class Address2(BaseModel):
    city: Optional[str] = Field(None, description='The name of the city.')
    country: str = Field(
        ...,
        description="The two-character ISO-3166-1 alpha-2 country code. For example, **US**.\n>If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.",
    )
    line1: Optional[str] = Field(None, description='First line of the address.')
    line2: Optional[str] = Field(None, description='Second line of the address.')
    line3: Optional[str] = Field(None, description='Third line of the address.')
    postalCode: Optional[str] = Field(
        None,
        description='The postal code.\nMaximum length:\n* 5 digits for an address in the US.\n* 10 characters for an address in all other countries.',
    )
    stateOrProvince: Optional[str] = Field(
        None,
        description='The two-letterISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada.',
    )


class Amount(BaseModel):
    currency: constr(min_length=3, max_length=3) = Field(
        ...,
        description='The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).',
    )
    value: int = Field(
        ...,
        description='The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).',
    )


class Balance(BaseModel):
    available: int = Field(
        ..., description='The remaining amount available for spending.'
    )
    balance: int = Field(..., description='The total amount in the balance.')
    currency: str = Field(
        ...,
        description='The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.',
    )
    reserved: int = Field(
        ...,
        description='The amount reserved for payments that have been authorised, but have not been captured yet.',
    )


class BalanceAccount(BaseModel):
    accountHolderId: str = Field(
        ...,
        description='The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.',
    )
    balances: Optional[List[Balance]] = Field(
        None, description='List of balances with the amount and currency.'
    )
    defaultCurrencyCode: Optional[str] = Field(
        None,
        description='The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account.\nThe default value is **EUR**.',
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.',
    )
    id: str = Field(..., description='The unique identifier of the balance account.')
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference for the balance account, maximum 150 characters.',
    )
    status: Optional[Status] = Field(
        None,
        description='The status of the balance account, set to **active** by default. \n',
    )
    timeZone: Optional[str] = Field(
        None,
        description='The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).',
    )


class BalanceAccountBase(BaseModel):
    accountHolderId: str = Field(
        ...,
        description='The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.',
    )
    defaultCurrencyCode: Optional[str] = Field(
        None,
        description='The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account.\nThe default value is **EUR**.',
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.',
    )
    id: str = Field(..., description='The unique identifier of the balance account.')
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference for the balance account, maximum 150 characters.',
    )
    status: Optional[Status] = Field(
        None,
        description='The status of the balance account, set to **active** by default. \n',
    )
    timeZone: Optional[str] = Field(
        None,
        description='The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).',
    )


class BalanceAccountInfo(BaseModel):
    accountHolderId: str = Field(
        ...,
        description='The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.',
    )
    defaultCurrencyCode: Optional[str] = Field(
        None,
        description='The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account.\nThe default value is **EUR**.',
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.',
    )
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference for the balance account, maximum 150 characters.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).',
    )


class BalanceAccountUpdateRequest(BaseModel):
    accountHolderId: Optional[str] = Field(
        None,
        description='The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.',
    )
    defaultCurrencyCode: Optional[str] = Field(
        None,
        description='The default currency code of this balance account, in three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) format. \nThe default value is **EUR**.',
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.',
    )
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference to the balance account, maximum 150 characters.',
    )
    status: Optional[Status] = Field(
        None,
        description='The status of the balance account. Payment instruments linked to the balance account can only be used if the balance account status is **active**.\n\nPossible values: **active**, **inactive**, **closed**, **suspended**.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).',
    )


class BalancePlatform(BaseModel):
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='Your description of the balance platform, maximum 300 characters.',
    )
    id: str = Field(..., description='The unique identifier of the balance platform.')
    status: Optional[str] = Field(
        None,
        description='The status of the balance platform.\n\nPossible values: **Active**, **Inactive**, **Closed**, **Suspended**.',
    )


class BrandVariantsRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[List[str]] = Field(
        None,
        description='List of card brand variants.\n\nPossible values: \n\n- **mc**, **mccredit**, **mccommercialcredit_b2b**, **mcdebit**, **mcbusinessdebit**, **mcbusinessworlddebit**, **mcprepaid**, **mcmaestro**\n\n - **visa**, **visacredit**, **visadebit**, **visaprepaid**.\n\nYou can specify a rule for a generic variant. For example, to create a rule for all Mastercard payment instruments, use **mc**. The rule is applied to all payment instruments under **mc**, such as **mcbusinessdebit** and **mcdebit**.\n\n',
    )


class BulkAddress(BaseModel):
    city: Optional[str] = Field(None, description='The name of the city.')
    company: Optional[str] = Field(None, description='The name of the company.')
    country: str = Field(
        ...,
        description='The two-character ISO-3166-1 alpha-2 country code. For example, **US**.',
    )
    email: Optional[str] = Field(None, description='The email address.')
    houseNumberOrName: Optional[str] = Field(
        None, description='The house number or name.'
    )
    mobile: Optional[str] = Field(None, description='The full telephone number.')
    postalCode: Optional[str] = Field(
        None,
        description='The postal code.\n\nMaximum length:\n\n* 5 digits for addresses in the US.\n\n* 10 characters for all other countries.',
    )
    stateOrProvince: Optional[str] = Field(
        None,
        description='The two-letter ISO 3166-2 state or province code.\n\nMaximum length: 2 characters for addresses in the US.',
    )
    street: Optional[str] = Field(None, description='The streetname of the house.')


class AccountType(Enum):
    checking = 'checking'
    savings = 'savings'


class Type2(Enum):
    caLocal = 'caLocal'


class CALocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=5, max_length=12) = Field(
        ...,
        description='The 5- to 12-digit bank account number, without separators or whitespace.',
    )
    accountType: Optional[AccountType] = Field(
        'checking',
        description='The bank account type.\n\nPossible values: **checking** or **savings**. Defaults to **checking**.',
    )
    institutionNumber: constr(min_length=3, max_length=3) = Field(
        ...,
        description='The 3-digit institution number, without separators or whitespace.',
    )
    transitNumber: constr(min_length=5, max_length=5) = Field(
        ..., description='The 5-digit transit number, without separators or whitespace.'
    )
    type: Type2 = Field(..., description='**caLocal**')


class Type3(Enum):
    czLocal = 'czLocal'


class CZLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=2, max_length=17) = Field(
        ...,
        description='The 2- to 16-digit bank account number (Číslo účtu) in the following format:\n\n- The optional prefix (předčíslí).\n\n- The required second part (základní část) which must be at least two non-zero digits.\n\nExamples:\n\n- **19-123457** (with prefix)\n\n- **123457** (without prefix)\n\n- **000019-0000123457** (with prefix, normalized)\n\n- **000000-0000123457** (without prefix, normalized)',
    )
    bankCode: constr(min_length=4, max_length=4) = Field(
        ...,
        description='The 4-digit bank code (Kód banky), without separators or whitespace.',
    )
    type: Type3 = Field(..., description='**czLocal**')


class CapabilityProblem(BaseModel):
    pass


class CapitalBalance(BaseModel):
    currency: str = Field(
        ...,
        description='The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).',
    )
    fee: int = Field(..., description='Fee amount.')
    principal: int = Field(..., description='Principal amount.')
    total: int = Field(
        ..., description='Total amount. A sum of principal amount and fee amount.'
    )


class FormFactor(Enum):
    physical = 'physical'
    unknown = 'unknown'
    virtual = 'virtual'


class CardConfiguration(BaseModel):
    activation: Optional[str] = Field(
        None,
        description='Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.',
    )
    activationUrl: Optional[constr(max_length=255)] = Field(
        None,
        description="Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process. \n\nMaximum length: 255 characters.",
    )
    bulkAddress: Optional[BulkAddress] = Field(
        None,
        description='Overrides the shipment bulk address defined in the `configurationProfileId`.',
    )
    cardImageId: Optional[str] = Field(
        None,
        description='The ID of the card image. This is the image that will be printed on the full front of the card.',
    )
    carrier: Optional[str] = Field(
        None,
        description='Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.',
    )
    carrierImageId: Optional[str] = Field(
        None,
        description='The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.',
    )
    configurationProfileId: str = Field(
        ...,
        description='The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.\n\nFor example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.',
    )
    currency: Optional[str] = Field(
        None,
        description='The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.',
    )
    envelope: Optional[str] = Field(
        None,
        description='Overrides the envelope design ID defined in the `configurationProfileId`. ',
    )
    insert: Optional[str] = Field(
        None,
        description='Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.',
    )
    language: Optional[str] = Field(
        None,
        description='The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.',
    )
    logoImageId: Optional[str] = Field(
        None,
        description='The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.',
    )
    pinMailer: Optional[str] = Field(
        None,
        description='Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.',
    )
    shipmentMethod: Optional[str] = Field(
        None,
        description='Overrides the logistics company defined in the `configurationProfileId`.',
    )


class CountriesRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[List[str]] = Field(
        None,
        description='List of two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes.',
    )


class Type4(Enum):
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'
    balance = 'balance'
    cron = 'cron'


class CronSweepSchedule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cronExpression: str = Field(
        ...,
        description='A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.\n\nThe expression must have five values separated by a single space in the following order:\n\n* Minute: **0-59**\n\n* Hour: **0-23**\n\n* Day of the month: **1-31**\n\n* Month: **1-12** or **JAN-DEC**\n\n* Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.\n\nThe following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and **/**. See [crontab guru](https://crontab.guru/) for more examples.',
    )
    type: Optional[Type4] = Field(
        None,
        description='The schedule type.\n\nPossible values:\n\n* **cron**: push out funds based on a cron expression.\n\n* **daily**: push out funds daily at 07:00 AM CET.\n\n* **weekly**: push out funds every Monday at 07:00 AM CET.\n\n* **monthly**: push out funds every first of the month at 07:00 AM CET.\n\n* **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.',
    )


class ValueEnum(Enum):
    friday = 'friday'
    monday = 'monday'
    saturday = 'saturday'
    sunday = 'sunday'
    thursday = 'thursday'
    tuesday = 'tuesday'
    wednesday = 'wednesday'


class DayOfWeekRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[List[ValueEnum]] = Field(
        None,
        description='List of days of the week.\n\nPossible values: **monday**, **tuesday**, **wednesday**, **thursday**, **friday**, **saturday**, **sunday**.\n\n',
    )


class DifferentCurrenciesRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[bool] = Field(
        None,
        description='Checks the currency of the payment against the currency of the payment instrument.\n\nPossible values:\n\n- **true**: The currency of the payment is different from the currency of the payment instrument.\n\n- **false**: The currencies are the same.\n\n',
    )


class Unit(Enum):
    days = 'days'
    hours = 'hours'
    minutes = 'minutes'
    months = 'months'
    weeks = 'weeks'


class Duration(BaseModel):
    unit: Optional[Unit] = Field(
        None,
        description='The unit of time. You can only use **minutes** and **hours** if the `interval.type` is **sliding**.\n\nPossible values: **minutes**, **hours**, **days**, **weeks**, or **months**',
    )
    value: Optional[int] = Field(
        None,
        description='The length of time by the unit. For example, 5 days.\n\nThe maximum duration is 90 days or an equivalent in other units. For example, 3 months.',
    )


class ValueEnum1(Enum):
    barcode = 'barcode'
    chip = 'chip'
    cof = 'cof'
    contactless = 'contactless'
    magstripe = 'magstripe'
    manual = 'manual'
    ocr = 'ocr'
    server = 'server'
    unknown = 'unknown'


class EntryModesRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[List[ValueEnum1]] = Field(
        None,
        description='List of point-of-sale entry modes.\n\nPossible values: **barcode**, **chip**, **cof**, **contactless**, **magstripe**, **manual**, **ocr**, **server**.\n\n',
    )


class Expiry(BaseModel):
    month: Optional[str] = Field(
        None, description='The month in which the card will expire.'
    )
    year: Optional[str] = Field(
        None, description='The year in which the card will expire.'
    )


class Fee(BaseModel):
    amount: Amount = Field(..., description='An object containing the fee amount.')


class GrantLimit(BaseModel):
    amount: Optional[Amount] = Field(
        None, description='The amount available on the grant account.'
    )


class ContractType(Enum):
    cashAdvance = 'cashAdvance'
    loan = 'loan'


class Type5(Enum):
    huLocal = 'huLocal'


class HULocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=24, max_length=24) = Field(
        ...,
        description='The 24-digit bank account number, without separators or whitespace.',
    )
    type: Type5 = Field(..., description='**huLocal**')


class Type6(Enum):
    iban = 'iban'


class IbanAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    iban: str = Field(
        ...,
        description='The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.',
    )
    type: Type6 = Field(..., description='**iban**')


class InternationalTransactionRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[bool] = Field(
        None,
        description='Boolean indicating whether transaction is an international transaction.\n\nPossible values:\n\n- **true**: The transaction is an international transaction.\n\n- **false**: The transaction is a domestic transaction.\n\n',
    )


class InvalidField(BaseModel):
    message: str = Field(..., description='Description of the validation error.')
    name: str = Field(..., description='The field that has an invalid value.')
    value: str = Field(..., description='The invalid value.')


class JSONPath(BaseModel):
    content: Optional[List[str]] = None


class LocalDateTime(BaseModel):
    pass


class MatchingTransactionsRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[int] = Field(None, description='The number of transactions.')


class MccsRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[List[str]] = Field(
        None, description='List of merchant category codes (MCCs).'
    )


class MerchantAcquirerPair(BaseModel):
    acquirerId: Optional[str] = Field(None, description='The acquirer ID.')
    merchantId: Optional[str] = Field(
        None, description='The merchant identification number (MID).'
    )


class MerchantsRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[List[MerchantAcquirerPair]] = Field(
        None, description='List of merchant ID and acquirer ID pairs.'
    )


class Type7(Enum):
    noLocal = 'noLocal'


class NOLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=11, max_length=11) = Field(
        ...,
        description='The 11-digit bank account number, without separators or whitespace.',
    )
    type: Type7 = Field(..., description='**noLocal**')


class Name(BaseModel):
    firstName: str = Field(..., description='The first name.')
    lastName: str = Field(..., description='The last name.')


class Type8(Enum):
    numberAndBic = 'numberAndBic'


class NumberAndBicAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(max_length=34) = Field(
        ...,
        description='The bank account number, without separators or whitespace. The length and format depends on the bank or country.',
    )
    additionalBankIdentification: Optional[AdditionalBankIdentification] = Field(
        None,
        description='Additional identification codes of the bank. Some banks may require these identifiers for cross-border transfers.',
    )
    bic: constr(min_length=8, max_length=11) = Field(
        ..., description="The bank's 8- or 11-character BIC or SWIFT code."
    )
    type: Type8 = Field(..., description='**numberAndBic**')


class Type9(Enum):
    plLocal = 'plLocal'


class PLLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=26, max_length=26) = Field(
        ...,
        description='The 26-digit bank account number ([Numer rachunku](https://pl.wikipedia.org/wiki/Numer_Rachunku_Bankowego)), without separators or whitespace.',
    )
    type: Type9 = Field(..., description='**plLocal**')


class PaginatedBalanceAccountsResponse(BaseModel):
    balanceAccounts: List[BalanceAccountBase] = Field(
        ..., description='List of balance accounts.'
    )
    hasNext: bool = Field(
        ..., description='Indicates whether there are more items on the next page.'
    )
    hasPrevious: bool = Field(
        ..., description='Indicates whether there are more items on the previous page.'
    )


class StatusReason(Enum):
    accountClosure = 'accountClosure'
    damaged = 'damaged'
    endOfLife = 'endOfLife'
    expired = 'expired'
    lost = 'lost'
    other = 'other'
    stolen = 'stolen'
    suspectedFraud = 'suspectedFraud'


class Type10(Enum):
    bankAccount = 'bankAccount'
    card = 'card'


class PaymentInstrumentGroup(BaseModel):
    balancePlatform: str = Field(
        ...,
        description='The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the payment instrument group belongs.',
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='Your description for the payment instrument group, maximum 300 characters.',
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the payment instrument group.'
    )
    properties: Optional[Dict[str, str]] = Field(
        None, description='Properties of the payment instrument group.'
    )
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference for the payment instrument group, maximum 150 characters.',
    )
    txVariant: str = Field(
        ..., description='The tx variant of the payment instrument group.'
    )


class PaymentInstrumentGroupInfo(BaseModel):
    balancePlatform: str = Field(
        ...,
        description='The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the payment instrument group belongs.',
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='Your description for the payment instrument group, maximum 300 characters.',
    )
    properties: Optional[Dict[str, str]] = Field(
        None, description='Properties of the payment instrument group.'
    )
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference for the payment instrument group, maximum 150 characters.',
    )
    txVariant: str = Field(
        ..., description='The tx variant of the payment instrument group.'
    )


class PaymentInstrumentRevealInfo(BaseModel):
    cvc: str = Field(..., description='The CVC2 value of the card.')
    expiration: Expiry = Field(..., description='The expiration date of the card.')
    pan: str = Field(..., description='The primary account number (PAN) of the card.')


class Type12(Enum):
    landline = 'landline'
    mobile = 'mobile'


class Phone(BaseModel):
    number: str = Field(
        ...,
        description='The full phone number provided as a single string. \nFor example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**, \n\n or **"(0031) 611223344"**.',
    )
    type: Type12 = Field(
        ...,
        description='Type of phone number.\nPossible values: \n**Landline**, **Mobile**.\n',
    )


class PhoneType(Enum):
    Fax = 'Fax'
    Landline = 'Landline'
    Mobile = 'Mobile'
    SIP = 'SIP'


class PhoneNumber(BaseModel):
    phoneCountryCode: Optional[str] = Field(
        None,
        description='The two-character ISO-3166-1 alpha-2 country code of the phone number.\nFor example, **US** or **NL**.',
    )
    phoneNumber: Optional[str] = Field(
        None,
        description='The phone number.\nThe inclusion of the phone number country code is not necessary.',
    )
    phoneType: Optional[PhoneType] = Field(
        None,
        description='The type of the phone number.\nPossible values: **Landline**, **Mobile**, **SIP**, **Fax**.',
    )


class ValueEnum2(Enum):
    atmWithdraw = 'atmWithdraw'
    balanceInquiry = 'balanceInquiry'
    ecommerce = 'ecommerce'
    moto = 'moto'
    pos = 'pos'
    recurring = 'recurring'
    token = 'token'
    unknown = 'unknown'


class ProcessingTypesRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[List[ValueEnum2]] = Field(
        None,
        description='List of processing types.\n\nPossible values: **atmWithdraw**, **balanceInquiry**, **ecommerce**, **moto**, **pos**, **recurring**, **token**.\n\n',
    )


class RepaymentTerm(BaseModel):
    estimatedDays: int = Field(
        ..., description='The estimated term for repaying the grant, in days.'
    )
    maximumDays: Optional[int] = Field(
        None,
        description='The maximum term for repaying the grant, in days. Only applies when `contractType` is **loan**.',
    )


class Type13(Enum):
    seLocal = 'seLocal'


class SELocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=7, max_length=10) = Field(
        ...,
        description='The 7- to 10-digit bank account number ([Bankkontonummer](https://sv.wikipedia.org/wiki/Bankkonto)), without the clearing number, separators, or whitespace.',
    )
    clearingNumber: constr(min_length=4, max_length=5) = Field(
        ...,
        description='The 4- to 5-digit clearing number ([Clearingnummer](https://sv.wikipedia.org/wiki/Clearingnummer)), without separators or whitespace.',
    )
    type: Type13 = Field(..., description='**seLocal**')


class Type14(Enum):
    sgLocal = 'sgLocal'


class SGLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=4, max_length=19) = Field(
        ...,
        description='The 4- to 19-digit bank account number, without separators or whitespace.',
    )
    bic: constr(min_length=8, max_length=11) = Field(
        ..., description="The bank's 8- or 11-character BIC or SWIFT code."
    )
    type: Optional[Type14] = Field('sgLocal', description='**sgLocal**')


class Operation(Enum):
    contains = 'contains'
    endsWith = 'endsWith'
    isEqualTo = 'isEqualTo'
    startsWith = 'startsWith'


class StringMatch(BaseModel):
    operation: Optional[Operation] = Field(
        None,
        description='The type of string matching operation. Possible values:  **startsWith**, **endsWith**, **isEqualTo**, **contains**,',
    )
    value: Optional[str] = Field(None, description='The string to be matched.')


class Category(Enum):
    bank = 'bank'
    internal = 'internal'
    platformPayment = 'platformPayment'


class Priority(Enum):
    crossBorder = 'crossBorder'
    directDebit = 'directDebit'
    fast = 'fast'
    instant = 'instant'
    internal = 'internal'
    regular = 'regular'
    wire = 'wire'


class Reason(Enum):
    amountLimitExceeded = 'amountLimitExceeded'
    approved = 'approved'
    counterpartyAccountBlocked = 'counterpartyAccountBlocked'
    counterpartyAccountClosed = 'counterpartyAccountClosed'
    counterpartyAccountNotFound = 'counterpartyAccountNotFound'
    counterpartyAddressRequired = 'counterpartyAddressRequired'
    counterpartyBankTimedOut = 'counterpartyBankTimedOut'
    counterpartyBankUnavailable = 'counterpartyBankUnavailable'
    error = 'error'
    notEnoughBalance = 'notEnoughBalance'
    refusedByCounterpartyBank = 'refusedByCounterpartyBank'
    routeNotFound = 'routeNotFound'
    unknown = 'unknown'


class Status7(Enum):
    active = 'active'
    inactive = 'inactive'


class Type15(Enum):
    pull = 'pull'
    push = 'push'


class SweepCounterparty(BaseModel):
    balanceAccountId: Optional[str] = Field(
        None,
        description='The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).\n\n You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.',
    )
    merchantAccount: Optional[str] = Field(
        None,
        description='The merchant account that will be the source of funds, if you are processing payments with Adyen. You can only use this with sweeps of `type` **pull** and `schedule.type` **balance**.',
    )
    transferInstrumentId: Optional[str] = Field(
        None,
        description='The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).\n\nYou can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.',
    )


class Type16(Enum):
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'
    balance = 'balance'
    cron = 'cron'


class SweepSchedule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Optional[Type16] = Field(
        None,
        description='The schedule type.\n\nPossible values:\n\n* **cron**: push out funds based on a cron expression.\n\n* **daily**: push out funds daily at 07:00 AM CET.\n\n* **weekly**: push out funds every Monday at 07:00 AM CET.\n\n* **monthly**: push out funds every first of the month at 07:00 AM CET.\n\n* **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.',
    )


class ThresholdRepayment(BaseModel):
    amount: Amount = Field(
        ..., description='The amount to be repaid on a 30-day basis.'
    )


class TimeOfDay(BaseModel):
    endTime: Optional[str] = Field(
        None,
        description='The end time in a time-only ISO-8601 extended offset format. For example: **08:00:00+02:00**, **22:30:00-03:00**.\n\n',
    )
    startTime: Optional[str] = Field(
        None,
        description='The start time in a time-only ISO-8601 extended offset format. For example: **08:00:00+02:00**, **22:30:00-03:00**.\n\n',
    )


class TimeOfDayRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[TimeOfDay] = None


class TotalAmountRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[Amount] = Field(None, description='The amount value and currency.')


class OutcomeType(Enum):
    hardBlock = 'hardBlock'
    scoreBased = 'scoreBased'


class RequestType(Enum):
    authentication = 'authentication'
    authorization = 'authorization'
    tokenization = 'tokenization'


class Type17(Enum):
    allowList = 'allowList'
    blockList = 'blockList'
    maxUsage = 'maxUsage'
    velocity = 'velocity'


class TransactionRuleEntityKey(BaseModel):
    entityReference: Optional[str] = Field(
        None, description='The unique identifier of the resource.'
    )
    entityType: Optional[str] = Field(
        None,
        description='The type of resource.\n\nPossible values: **balancePlatform**, **paymentInstrumentGroup**, **accountHolder**, **balanceAccount**, or **paymentInstrument**.',
    )


class DayOfWeek(Enum):
    friday = 'friday'
    monday = 'monday'
    saturday = 'saturday'
    sunday = 'sunday'
    thursday = 'thursday'
    tuesday = 'tuesday'
    wednesday = 'wednesday'


class Type19(Enum):
    daily = 'daily'
    lifetime = 'lifetime'
    monthly = 'monthly'
    perTransaction = 'perTransaction'
    rolling = 'rolling'
    sliding = 'sliding'
    weekly = 'weekly'


class TransactionRuleInterval(BaseModel):
    dayOfMonth: Optional[int] = Field(
        None,
        description='The day of month, used when the `duration.unit` is **months**. If not provided, by default, this is set to **1**, the first day of the month.',
    )
    dayOfWeek: Optional[DayOfWeek] = Field(
        None,
        description='The day of week, used when the `duration.unit` is **weeks**. If not provided, by default, this is set to **monday**.\n\nPossible values: **sunday**, **monday**, **tuesday**, **wednesday**, **thursday**, **friday**.',
    )
    duration: Optional[Duration] = Field(
        None,
        description='The duration, which you can specify in hours, days, weeks, or months. The maximum duration is 90 days or an equivalent in other units. Required when the `type` is **rolling** or **sliding**.',
    )
    timeOfDay: Optional[str] = Field(
        None,
        description='The time of day, in **hh:mm:ss** format, used when the `duration.unit` is **hours**. If not provided, by default, this is set to **00:00:00**.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='The [time zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For example, **Europe/Amsterdam**. By default, this is set to **UTC**.',
    )
    type: Type19 = Field(
        ...,
        description='The [type of interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) during which the rule conditions and limits apply, and how often counters are reset.\n\nPossible values:\n  * **perTransaction**: conditions are evaluated and the counters are reset for every transaction.\n * **daily**: the counters are reset daily at 00:00:00 UTC.\n * **weekly**: the counters are reset every Monday at 00:00:00 UTC. \n * **monthly**: the counters reset every first day of the month at 00:00:00 UTC. \n * **lifetime**: conditions are applied to the lifetime of the payment instrument.\n * **rolling**: conditions are applied and the counters are reset based on a `duration`. If the reset date and time are not provided, Adyen applies the default reset time similar to fixed intervals. For example, if the duration is every two weeks, the counter resets every third Monday at 00:00:00 UTC.\n * **sliding**: conditions are applied and the counters are reset based on the current time and a `duration` that you specify.',
    )


class Type20(Enum):
    ukLocal = 'ukLocal'


class UKLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=8, max_length=8) = Field(
        ...,
        description='The 8-digit bank account number, without separators or whitespace.',
    )
    sortCode: constr(min_length=6, max_length=6) = Field(
        ...,
        description='The 6-digit [sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or whitespace.',
    )
    type: Type20 = Field(..., description='**ukLocal**')


class Type21(Enum):
    usLocal = 'usLocal'


class USLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=2, max_length=18) = Field(
        ..., description='The bank account number, without separators or whitespace.'
    )
    accountType: Optional[AccountType] = Field(
        'checking',
        description='The bank account type.\n\nPossible values: **checking** or **savings**. Defaults to **checking**.',
    )
    routingNumber: constr(min_length=9, max_length=9) = Field(
        ...,
        description='The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.',
    )
    type: Type21 = Field(..., description='**usLocal**')


class Status10(Enum):
    active = 'active'
    closed = 'closed'
    inactive = 'inactive'
    suspended = 'suspended'


class Type22(Enum):
    bankAccount = 'bankAccount'
    card = 'card'


class Capability(Enum):
    acceptExternalFunding = 'acceptExternalFunding'
    acceptPspFunding = 'acceptPspFunding'
    acceptTransactionInRestrictedCountries = 'acceptTransactionInRestrictedCountries'
    acceptTransactionInRestrictedCountriesCommercial = (
        'acceptTransactionInRestrictedCountriesCommercial'
    )
    acceptTransactionInRestrictedCountriesConsumer = (
        'acceptTransactionInRestrictedCountriesConsumer'
    )
    acceptTransactionInRestrictedIndustries = 'acceptTransactionInRestrictedIndustries'
    acceptTransactionInRestrictedIndustriesCommercial = (
        'acceptTransactionInRestrictedIndustriesCommercial'
    )
    acceptTransactionInRestrictedIndustriesConsumer = (
        'acceptTransactionInRestrictedIndustriesConsumer'
    )
    acquiring = 'acquiring'
    atmWithdrawal = 'atmWithdrawal'
    atmWithdrawalCommercial = 'atmWithdrawalCommercial'
    atmWithdrawalConsumer = 'atmWithdrawalConsumer'
    atmWithdrawalInRestrictedCountries = 'atmWithdrawalInRestrictedCountries'
    atmWithdrawalInRestrictedCountriesCommercial = (
        'atmWithdrawalInRestrictedCountriesCommercial'
    )
    atmWithdrawalInRestrictedCountriesConsumer = (
        'atmWithdrawalInRestrictedCountriesConsumer'
    )
    authorisedPaymentInstrumentUser = 'authorisedPaymentInstrumentUser'
    getGrantOffers = 'getGrantOffers'
    issueBankAccount = 'issueBankAccount'
    issueCard = 'issueCard'
    issueCardCommercial = 'issueCardCommercial'
    issueCardConsumer = 'issueCardConsumer'
    localAcceptance = 'localAcceptance'
    payout = 'payout'
    payoutToTransferInstrument = 'payoutToTransferInstrument'
    processing = 'processing'
    receiveFromBalanceAccount = 'receiveFromBalanceAccount'
    receiveFromPlatformPayments = 'receiveFromPlatformPayments'
    receiveFromThirdParty = 'receiveFromThirdParty'
    receiveFromTransferInstrument = 'receiveFromTransferInstrument'
    receiveGrants = 'receiveGrants'
    receivePayments = 'receivePayments'
    sendToBalanceAccount = 'sendToBalanceAccount'
    sendToThirdParty = 'sendToThirdParty'
    sendToTransferInstrument = 'sendToTransferInstrument'
    thirdPartyFunding = 'thirdPartyFunding'
    useCard = 'useCard'
    useCardCommercial = 'useCardCommercial'
    useCardConsumer = 'useCardConsumer'
    useCardInRestrictedCountries = 'useCardInRestrictedCountries'
    useCardInRestrictedCountriesCommercial = 'useCardInRestrictedCountriesCommercial'
    useCardInRestrictedCountriesConsumer = 'useCardInRestrictedCountriesConsumer'
    useCardInRestrictedIndustries = 'useCardInRestrictedIndustries'
    useCardInRestrictedIndustriesCommercial = 'useCardInRestrictedIndustriesCommercial'
    useCardInRestrictedIndustriesConsumer = 'useCardInRestrictedIndustriesConsumer'
    withdrawFromAtm = 'withdrawFromAtm'
    withdrawFromAtmCommercial = 'withdrawFromAtmCommercial'
    withdrawFromAtmConsumer = 'withdrawFromAtmConsumer'
    withdrawFromAtmInRestrictedCountries = 'withdrawFromAtmInRestrictedCountries'
    withdrawFromAtmInRestrictedCountriesCommercial = (
        'withdrawFromAtmInRestrictedCountriesCommercial'
    )
    withdrawFromAtmInRestrictedCountriesConsumer = (
        'withdrawFromAtmInRestrictedCountriesConsumer'
    )


class VerificationDeadline(BaseModel):
    capabilities: List[Capability] = Field(
        ..., description='The names of the capabilities to be disallowed.'
    )
    expiresAt: datetime = Field(
        ...,
        description='The date that verification is due by before capabilities are disallowed.',
    )


class Void(BaseModel):
    pass


class Authentication(BaseModel):
    email: Optional[str] = Field(
        None, description='The email address where the one-time password (OTP) is sent.'
    )
    password: Optional[constr(min_length=1, max_length=30)] = Field(
        None,
        description='The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.\n\n* Characters between **a-z**, **A-Z**, and **0-9**\n\n* Special characters: **äöüßÄÖÜ+-*/ç%()=?!~#\'",;:$&àùòâôûáúó**',
    )
    phone: Optional[Phone] = Field(
        None,
        description='The phone number where the one-time password (OTP) is sent.\n\nThis object must have:\n\n* A `type` set to **mobile**.\n\n* A `number` with a valid country code.\n\n* A `number` with more than 4 digits, excluding the country code.\n\n>Make sure to verify that the card user owns the phone number.',
    )


class BankAccountIdentificationValidationRequest(BaseModel):
    accountIdentification: Union[
        AULocalAccountIdentification,
        CALocalAccountIdentification,
        CZLocalAccountIdentification,
        HULocalAccountIdentification,
        IbanAccountIdentification,
        NOLocalAccountIdentification,
        NumberAndBicAccountIdentification,
        PLLocalAccountIdentification,
        SELocalAccountIdentification,
        SGLocalAccountIdentification,
        UKLocalAccountIdentification,
        USLocalAccountIdentification,
    ] = Field(..., description='Bank account identification.')


class CapitalGrantAccount(BaseModel):
    balances: Optional[List[CapitalBalance]] = Field(
        None, description='The balances of the grant account.'
    )
    fundingBalanceAccountId: Optional[str] = Field(
        None,
        description='The unique identifier of the balance account used to fund the grant.',
    )
    id: Optional[str] = Field(None, description='The identifier of the grant account.')
    limits: Optional[List[GrantLimit]] = Field(
        None, description='The limits of the grant account.'
    )


class ContactDetails(BaseModel):
    address: Address = Field(..., description='The address of the account holder.')
    email: str = Field(..., description='The email address of the account holder.')
    phone: Phone = Field(..., description='The phone number of the account holder.')
    webAddress: Optional[str] = Field(
        None, description="The URL of the account holder's website."
    )


class DeliveryContact(BaseModel):
    address: Address2 = Field(..., description='The address of the contact.')
    email: Optional[str] = Field(None, description='The email address of the contact.')
    fullPhoneNumber: Optional[str] = Field(
        None,
        description='The full phone number of the contact provided as a single string. It will be handled as a landline phone.\n**Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"',
    )
    name: Name = Field(..., description='The name of the contact.')
    phoneNumber: Optional[PhoneNumber] = Field(
        None, description='The phone number of the contact.'
    )
    webAddress: Optional[str] = Field(
        None, description="The URL of the contact's website."
    )


class JSONObject(BaseModel):
    paths: Optional[List[JSONPath]] = None
    rootPath: Optional[JSONPath] = None


class MerchantNamesRestriction(BaseModel):
    operation: str = Field(
        ..., description='Defines how the condition must be evaluated.'
    )
    value: Optional[List[StringMatch]] = None


class Repayment(BaseModel):
    basisPoints: int = Field(
        ...,
        description='The repayment that is deducted daily from incoming net volume, in [basis points](https://www.investopedia.com/terms/b/basispoint.asp).',
    )
    term: Optional[RepaymentTerm] = Field(
        None,
        description='An object containing the details of the configuration for repayment term.',
    )
    threshold: Optional[ThresholdRepayment] = Field(
        None,
        description='An object containing the details of the 30-day repayment threshold.',
    )


class RestServiceError(BaseModel):
    detail: str = Field(
        ...,
        description='A human-readable explanation specific to this occurrence of the problem.',
    )
    errorCode: str = Field(..., description='A code that identifies the problem type.')
    instance: Optional[str] = Field(
        None,
        description='A unique URI that identifies the specific occurrence of the problem.',
    )
    invalidFields: Optional[List[InvalidField]] = Field(
        None,
        description='Detailed explanation of each validation error, when applicable.',
    )
    requestId: Optional[str] = Field(
        None,
        description='A unique reference for the request, essentially the same as `pspReference`.',
    )
    response: Optional[JSONObject] = Field(None, description='JSON response payload.')
    status: int = Field(..., description='The HTTP status code.')
    title: str = Field(
        ..., description='A short, human-readable summary of the problem type.'
    )
    type: str = Field(
        ...,
        description='A URI that identifies the problem type, pointing to human-readable documentation on this problem type.',
    )


class SweepConfigurationV2(BaseModel):
    category: Optional[Category] = Field(
        None,
        description='The type of transfer that results from the sweep.\n\nPossible values:\n\n - **bank**: Sweep to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).\n\n- **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.\n\nRequired when setting `priorities`.',
    )
    counterparty: SweepCounterparty = Field(
        ...,
        description='The destination or the source of the funds, depending on the `type`.\n\nEither a `balanceAccountId`, `transferInstrumentId`, or `merchantAccount` is required.',
    )
    currency: str = Field(
        ...,
        description='The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.\n\nThe sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).',
    )
    description: Optional[str] = Field(
        None,
        description="The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.\n\nIf the message is longer after replacing placeholders, the message will be cut off at 140 characters.",
    )
    id: str = Field(..., description='The unique identifier of the sweep.')
    priorities: Optional[List[Priority]] = Field(
        None,
        description="The list of priorities for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. You can provide multiple priorities. Adyen will try to pay out using the priority listed first, and if that's not possible, it moves on to the next option in the order of provided priorities.\n\nPossible values:\n\n* **regular**: For normal, low-value transactions.\n\n* **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.\n\n* **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.\n\n* **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).\n\n* **crossBorder**: High-value transfer to a recipient in a different country.\n\n* **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).\n\nSet `category` to **bank**. For more details, see [optional priorities setup](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/scheduled-payouts#optional-priorities-setup).",
    )
    reason: Optional[Reason] = Field(
        None, description='The reason for disabling the sweep.'
    )
    schedule: Union[CronSweepSchedule, SweepSchedule] = Field(
        ...,
        description='The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.',
    )
    status: Optional[Status7] = Field(
        None,
        description='The status of the sweep. If not provided, by default, this is set to **active**.\n\nPossible values: \n\n * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration. \n\n * **inactive**: the sweep is disabled and cannot be triggered. \n\n',
    )
    sweepAmount: Optional[Amount] = Field(
        None,
        description='The amount that must be pushed out or pulled in. You can configure either `sweepAmount` or `targetAmount`, not both.',
    )
    targetAmount: Optional[Amount] = Field(
        None,
        description='The amount that must be available in the balance account after the sweep. You can configure either `sweepAmount` or `targetAmount`, not both.',
    )
    triggerAmount: Optional[Amount] = Field(
        None,
        description='The threshold amount that triggers the sweep. If not provided, by default, the amount is set to zero. The `triggerAmount` is evaluated according to the specified `schedule.type`.\n\n* For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds are pulled in to the balance account.\n\n* For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds are pushed out of the balance account.',
    )
    type: Optional[Type15] = Field(
        'push',
        description='The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.\n\nPossible values:\n\n * **push**: _push out funds_ to a destination balance account or transfer instrument.\n\n * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.',
    )


class TransactionRuleRestrictions(BaseModel):
    activeNetworkTokens: Optional[ActiveNetworkTokensRestriction] = Field(
        None,
        description="The total number of tokens that a card can have across different kinds of digital wallets on the user's phones, watches, or other wearables.\n\nSupported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**, **greaterThan**, **lessThanOrEqualTo**, **lessThan**.",
    )
    brandVariants: Optional[BrandVariantsRestriction] = Field(
        None,
        description='List of card brand variants and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**.',
    )
    countries: Optional[CountriesRestriction] = Field(
        None,
        description='List of countries and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**.',
    )
    dayOfWeek: Optional[DayOfWeekRestriction] = Field(
        None,
        description='List of week days and the operation. Supported operations: **anyMatch**, **noneMatch**.',
    )
    differentCurrencies: Optional[DifferentCurrenciesRestriction] = Field(
        None,
        description='Compares the currency of the payment against the currency of the payment instrument, and specifies the operation.\n\nSupported operations: **equals**, **notEquals**.',
    )
    entryModes: Optional[EntryModesRestriction] = Field(
        None,
        description='List of point-of-sale entry modes and the operation..\n\nSupported operations: **anyMatch**, **noneMatch**.',
    )
    internationalTransaction: Optional[InternationalTransactionRestriction] = Field(
        None,
        description='Indicates whether transaction is an international transaction and specifies the operation.\n\nSupported operations: **equals**, **notEquals**.',
    )
    matchingTransactions: Optional[MatchingTransactionsRestriction] = Field(
        None,
        description='The number of transactions and the operation.\n\nSupported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**, **greaterThan**, **lessThanOrEqualTo**, **lessThan**.',
    )
    mccs: Optional[MccsRestriction] = Field(
        None,
        description='List of merchant category codes (MCCs) and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**.',
    )
    merchantNames: Optional[MerchantNamesRestriction] = Field(
        None,
        description='List of names that will be compared to the merchant name according to the matching type.\n\nSupported operations: **anyMatch**, **noneMatch**.',
    )
    merchants: Optional[MerchantsRestriction] = Field(
        None,
        description='List of merchant ID and acquirer ID pairs, and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**.',
    )
    processingTypes: Optional[ProcessingTypesRestriction] = Field(
        None,
        description='List of processing types and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**.',
    )
    timeOfDay: Optional[TimeOfDayRestriction] = Field(
        None,
        description='A start and end time in a time-only ISO-8601 extended offset format. Supported operations: **equals**, **notEquals**.',
    )
    totalAmount: Optional[TotalAmountRestriction] = Field(
        None,
        description='The total amount and the operation.\n\nSupported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**, **greaterThan**, **lessThanOrEqualTo**, **lessThan**.',
    )


class AccountHolderCapability(BaseModel):
    allowed: Optional[bool] = Field(
        None,
        description='Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.',
    )
    allowedLevel: Optional[AllowedLevel] = Field(
        None,
        description='The capability level that is allowed for the account holder.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.',
    )
    allowedSettings: Optional[JSONObject] = Field(
        None,
        description='A JSON object containing the settings that are allowed for the account holder.',
    )
    enabled: Optional[bool] = Field(
        None,
        description='Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.',
    )
    problems: Optional[List[CapabilityProblem]] = Field(
        None,
        description='Contains verification errors and the actions that you can take to resolve them.',
    )
    requested: Optional[bool] = Field(
        None,
        description='Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.',
    )
    requestedLevel: Optional[RequestedLevel] = Field(
        None,
        description='The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.',
    )
    requestedSettings: Optional[JSONObject] = Field(
        None,
        description='A JSON object containing the settings that were requested for the account holder.',
    )
    transferInstruments: Optional[List[AccountSupportingEntityCapability]] = Field(
        None,
        description='Contains the status of the transfer instruments associated with this capability. ',
    )
    verificationStatus: Optional[VerificationStatus] = Field(
        None,
        description='The status of the verification checks for the capability.\n\nPossible values:\n\n* **pending**: Adyen is running the verification.\n\n* **invalid**: The verification failed. Check if the `errors` array contains more information.\n\n* **valid**: The verification has been successfully completed.\n\n* **rejected**: Adyen has verified the information, but found reasons to not allow the capability.\n',
    )


class AccountHolderInfo(BaseModel):
    balancePlatform: Optional[str] = Field(
        None,
        description='The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.',
    )
    capabilities: Optional[Dict[str, AccountHolderCapability]] = Field(
        None,
        description='Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.',
    )
    contactDetails: Optional[ContactDetails] = Field(
        None, description='Contact details of the account holder.'
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='Your description for the account holder, maximum 300 characters.',
    )
    legalEntityId: str = Field(
        ...,
        description='The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.',
    )
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference for the account holder, maximum 150 characters.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).',
    )


class BalanceSweepConfigurationsResponse(BaseModel):
    hasNext: bool = Field(
        ..., description='Indicates whether there are more items on the next page.'
    )
    hasPrevious: bool = Field(
        ..., description='Indicates whether there are more items on the previous page.'
    )
    sweeps: List[SweepConfigurationV2] = Field(
        ..., description='List of sweeps associated with the balance account.'
    )


class Card(BaseModel):
    authentication: Optional[Authentication] = Field(
        None,
        description="Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.",
    )
    bin: Optional[str] = Field(
        None, description='The bank identification number (BIN) of the card number.'
    )
    brand: str = Field(
        ...,
        description='The brand of the physical or the virtual card.\nPossible values: **visa**, **mc**.',
    )
    brandVariant: str = Field(
        ...,
        description='The brand variant of the physical or the virtual card.\n>Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.',
    )
    cardholderName: constr(max_length=26) = Field(
        ..., description='The name of the cardholder.\n Maximum length: 26 characters.'
    )
    configuration: Optional[CardConfiguration] = Field(
        None,
        description='Settings required when creating a physical or a virtual card. \n\nReach out to your Adyen contact to get the values that you can send in this object.',
    )
    cvc: Optional[str] = Field(
        None,
        description='The CVC2 value of the card.\n> The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.',
    )
    deliveryContact: Optional[DeliveryContact] = Field(
        None,
        description='The delivery contact (name and address) for physical card delivery.',
    )
    expiration: Optional[Expiry] = Field(
        None, description='The expiration date of the card.'
    )
    formFactor: FormFactor = Field(
        ...,
        description='The form factor of the card.\nPossible values: **virtual**, **physical**.',
    )
    lastFour: Optional[str] = Field(
        None, description='Last last four digits of the card number.'
    )
    number: str = Field(
        ...,
        description='The primary account number (PAN) of the card.\n> The PAN is masked by default and returned only for single-use virtual cards.',
    )


class CardInfo(BaseModel):
    authentication: Optional[Authentication] = Field(
        None,
        description="Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.",
    )
    brand: str = Field(
        ...,
        description='The brand of the physical or the virtual card.\nPossible values: **visa**, **mc**.',
    )
    brandVariant: str = Field(
        ...,
        description='The brand variant of the physical or the virtual card.\n>Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.',
    )
    cardholderName: constr(max_length=26) = Field(
        ..., description='The name of the cardholder.\n Maximum length: 26 characters.'
    )
    configuration: Optional[CardConfiguration] = Field(
        None,
        description='Settings required when creating a physical or a virtual card. \n\nReach out to your Adyen contact to get the values that you can send in this object.',
    )
    deliveryContact: Optional[DeliveryContact] = Field(
        None,
        description='The delivery contact (name and address) for physical card delivery.',
    )
    formFactor: FormFactor = Field(
        ...,
        description='The form factor of the card.\nPossible values: **virtual**, **physical**.',
    )


class GrantOffer(BaseModel):
    accountHolderId: str = Field(
        ...,
        description='The identifier of the account holder to which the grant is offered.',
    )
    amount: Optional[Amount] = Field(
        None, description='The principal amount of the grant.'
    )
    contractType: Optional[ContractType] = Field(
        None,
        description='The contract type of the grant offer. Possible value: **cashAdvance**, **loan**.',
    )
    expiresAt: Optional[LocalDateTime] = Field(
        None, description='The end date of the grant offer validity period.'
    )
    fee: Optional[Fee] = Field(None, description='Details of the fee configuration.')
    id: Optional[str] = Field(
        None, description='The unique identifier of the grant offer.'
    )
    repayment: Optional[Repayment] = Field(
        None, description='Details of the repayment configuration.'
    )
    startsAt: Optional[LocalDateTime] = Field(
        None, description='The starting date of the grant offer validity period.'
    )


class GrantOffers(BaseModel):
    grantOffers: List[GrantOffer] = Field(
        ..., description='A list of available grant offers.'
    )


class PaymentInstrument(BaseModel):
    balanceAccountId: str = Field(
        ...,
        description='The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.',
    )
    bankAccount: Optional[
        Union[IbanAccountIdentification, USLocalAccountIdentification]
    ] = Field(
        None,
        description='Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**.',
    )
    card: Optional[Card] = Field(
        None,
        description='Contains information about the card payment instrument. Returned when you create a payment instrument with `type` **card**.',
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='Your description for the payment instrument, maximum 300 characters.',
    )
    id: str = Field(..., description='The unique identifier of the payment instrument.')
    issuingCountryCode: str = Field(
        ...,
        description='The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.',
    )
    paymentInstrumentGroupId: Optional[str] = Field(
        None,
        description='The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.',
    )
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference for the payment instrument, maximum 150 characters.',
    )
    status: Optional[Status] = Field(
        None,
        description='The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **inactive**.\n\nPossible values: \n\n * **active**:  The payment instrument is active and can be used to make payments. \n\n * **inactive**: The payment instrument is inactive and cannot be used to make payments. \n\n * **suspended**: The payment instrument is suspended, either because it was stolen or lost. \n\n * **closed**: The payment instrument is permanently closed. This action cannot be undone. \n\n',
    )
    statusReason: Optional[StatusReason] = Field(
        None,
        description='The reason for updating the status of the payment instrument.\n\nPossible values: **lost**, **stolen**, **damaged**, **suspectedFraud**, **expired**, **endOfLife**, **accountClosure**, **other**.\nIf the reason is **other**, you must also send the `statusComment` parameter describing the status change.',
    )
    type: Type10 = Field(
        ...,
        description='Type of payment instrument.\n\nPossible value: **card**, **bankAccount**. ',
    )


class PaymentInstrumentInfo(BaseModel):
    balanceAccountId: str = Field(
        ...,
        description='The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.',
    )
    card: Optional[CardInfo] = Field(
        None,
        description='Contains information about the card. Required when you create a payment instrument of `type` **card**.',
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='Your description for the payment instrument, maximum 300 characters.',
    )
    issuingCountryCode: str = Field(
        ...,
        description='The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.',
    )
    paymentInstrumentGroupId: Optional[str] = Field(
        None,
        description='The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.',
    )
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference for the payment instrument, maximum 150 characters.',
    )
    status: Optional[Status] = Field(
        None,
        description='The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **inactive**.\n\nPossible values: \n\n * **active**:  The payment instrument is active and can be used to make payments. \n\n * **inactive**: The payment instrument is inactive and cannot be used to make payments. \n\n * **suspended**: The payment instrument is suspended, either because it was stolen or lost. \n\n * **closed**: The payment instrument is permanently closed. This action cannot be undone. \n\n',
    )
    statusReason: Optional[StatusReason] = Field(
        None,
        description='The reason for updating the status of the payment instrument.\n\nPossible values: **lost**, **stolen**, **damaged**, **suspectedFraud**, **expired**, **endOfLife**, **accountClosure**, **other**.\nIf the reason is **other**, you must also send the `statusComment` parameter describing the status change.',
    )
    type: Type10 = Field(
        ...,
        description='Type of payment instrument.\n\nPossible value: **card**, **bankAccount**. ',
    )


class PaymentInstrumentUpdateRequest(BaseModel):
    balanceAccountId: Optional[str] = Field(
        None,
        description='The unique identifier of the balance account associated with this payment instrument.\n>You can only change the balance account ID if the payment instrument has **inactive** status.',
    )
    card: Optional[CardInfo] = Field(
        None,
        description='Object that contains information about the card payment instrument.',
    )
    status: Optional[Status] = Field(
        None,
        description='The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **inactive**.\n\nPossible values: \n\n * **active**:  The payment instrument is active and can be used to make payments. \n\n * **inactive**: The payment instrument is inactive and cannot be used to make payments. \n\n * **suspended**: The payment instrument is suspended, either because it was stolen or lost. \n\n * **closed**: The payment instrument is permanently closed. This action cannot be undone. \n\n',
    )
    statusComment: Optional[str] = Field(
        None,
        description='Comment for the status of the payment instrument.\n\nRequired if `statusReason` is **other**.',
    )
    statusReason: Optional[StatusReason] = Field(
        None,
        description='The reason for updating the status of the payment instrument.\n\nPossible values: **lost**, **stolen**, **damaged**, **suspectedFraud**, **expired**, **endOfLife**, **accountClosure**, **other**.\nIf the reason is **other**, you must also send the `statusComment` parameter describing the status change.',
    )


class TransactionRule(BaseModel):
    aggregationLevel: Optional[str] = Field(
        None,
        description='The level at which data must be accumulated, used in rules with `type` **velocity** or **maxUsage**. The level must be the [same or lower in hierarchy](https://docs.adyen.com/issuing/transaction-rules#accumulate-data) than the `entityKey`.\n\nIf not provided, by default, the rule will accumulate data at the **paymentInstrument** level.\n\nPossible values: **paymentInstrument**, **paymentInstrumentGroup**, **balanceAccount**, **accountHolder**, **balancePlatform**.',
    )
    description: constr(max_length=300) = Field(
        ...,
        description='Your description for the transaction rule, maximum 300 characters.',
    )
    endDate: Optional[str] = Field(
        None,
        description='The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\nIf not provided, the rule will be evaluated until the rule status is set to **inactive**.',
    )
    entityKey: TransactionRuleEntityKey = Field(
        ...,
        description='The type and unique identifier of the resource to which the rule applies.',
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the transaction rule.'
    )
    interval: TransactionRuleInterval = Field(
        ...,
        description='The [time interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) when the rule conditions apply.',
    )
    outcomeType: Optional[OutcomeType] = Field(
        None,
        description='The [outcome](https://docs.adyen.com/issuing/transaction-rules#outcome) that will be applied when a transaction meets the conditions of the rule. If not provided, by default, this is set to **hardBlock**.\n\nPossible values:\n\n * **hardBlock**: the transaction is declined.\n\n* **scoreBased**: the transaction is assigned the `score` you specified. Adyen calculates the total score and if it exceeds 100, the transaction is declined.',
    )
    reference: constr(max_length=150) = Field(
        ...,
        description='Your reference for the transaction rule, maximum 150 characters.',
    )
    requestType: Optional[RequestType] = Field(
        None,
        description='Indicates the type of request to which the rule applies.\n\nPossible values: **authorization**, **authentication**, **tokenization**.',
    )
    ruleRestrictions: TransactionRuleRestrictions = Field(
        ...,
        description='Contains one or more objects that define the [rule conditions](https://docs.adyen.com/issuing/transaction-rules#conditions). Each object must have a value and an operation which determines how the values must be evaluated.\n\nFor example, a `countries` object can have a list of country codes **["US", "CA"]** in the `value` field and **anyMatch** in the `operation` field.',
    )
    score: Optional[int] = Field(
        None,
        description='A positive or negative score applied to the transaction if it meets the conditions of the rule. Required when `outcomeType` is **scoreBased**.  The value must be between **-100** and **100**.',
    )
    startDate: Optional[str] = Field(
        None,
        description='The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\nIf not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**. \n\n',
    )
    status: Optional[Status7] = Field(
        None,
        description='The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created \nwith an **active** status. \n\nPossible values: **active**, **inactive**.',
    )
    type: Type17 = Field(
        ...,
        description='The [type of rule](https://docs.adyen.com/issuing/transaction-rules#rule-types), which defines if a rule blocks transactions based on individual characteristics or accumulates data.\n\nPossible values:\n * **blockList**: decline a transaction when the conditions are met.\n * **maxUsage**: add the amount or number of transactions for the lifetime of a payment instrument, and then decline a transaction when the specified limits are met.\n * **velocity**: add the amount or number of transactions based on a specified time interval, and then decline a transaction when the specified limits are met.\n',
    )


class TransactionRuleInfo(BaseModel):
    aggregationLevel: Optional[str] = Field(
        None,
        description='The level at which data must be accumulated, used in rules with `type` **velocity** or **maxUsage**. The level must be the [same or lower in hierarchy](https://docs.adyen.com/issuing/transaction-rules#accumulate-data) than the `entityKey`.\n\nIf not provided, by default, the rule will accumulate data at the **paymentInstrument** level.\n\nPossible values: **paymentInstrument**, **paymentInstrumentGroup**, **balanceAccount**, **accountHolder**, **balancePlatform**.',
    )
    description: constr(max_length=300) = Field(
        ...,
        description='Your description for the transaction rule, maximum 300 characters.',
    )
    endDate: Optional[str] = Field(
        None,
        description='The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\nIf not provided, the rule will be evaluated until the rule status is set to **inactive**.',
    )
    entityKey: TransactionRuleEntityKey = Field(
        ...,
        description='The type and unique identifier of the resource to which the rule applies.',
    )
    interval: TransactionRuleInterval = Field(
        ...,
        description='The [time interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) when the rule conditions apply.',
    )
    outcomeType: Optional[OutcomeType] = Field(
        None,
        description='The [outcome](https://docs.adyen.com/issuing/transaction-rules#outcome) that will be applied when a transaction meets the conditions of the rule. If not provided, by default, this is set to **hardBlock**.\n\nPossible values:\n\n * **hardBlock**: the transaction is declined.\n\n* **scoreBased**: the transaction is assigned the `score` you specified. Adyen calculates the total score and if it exceeds 100, the transaction is declined.',
    )
    reference: constr(max_length=150) = Field(
        ...,
        description='Your reference for the transaction rule, maximum 150 characters.',
    )
    requestType: Optional[RequestType] = Field(
        None,
        description='Indicates the type of request to which the rule applies.\n\nPossible values: **authorization**, **authentication**, **tokenization**.',
    )
    ruleRestrictions: TransactionRuleRestrictions = Field(
        ...,
        description='Contains one or more objects that define the [rule conditions](https://docs.adyen.com/issuing/transaction-rules#conditions). Each object must have a value and an operation which determines how the values must be evaluated.\n\nFor example, a `countries` object can have a list of country codes **["US", "CA"]** in the `value` field and **anyMatch** in the `operation` field.',
    )
    score: Optional[int] = Field(
        None,
        description='A positive or negative score applied to the transaction if it meets the conditions of the rule. Required when `outcomeType` is **scoreBased**.  The value must be between **-100** and **100**.',
    )
    startDate: Optional[str] = Field(
        None,
        description='The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\nIf not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**. \n\n',
    )
    status: Optional[Status7] = Field(
        None,
        description='The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created \nwith an **active** status. \n\nPossible values: **active**, **inactive**.',
    )
    type: Type17 = Field(
        ...,
        description='The [type of rule](https://docs.adyen.com/issuing/transaction-rules#rule-types), which defines if a rule blocks transactions based on individual characteristics or accumulates data.\n\nPossible values:\n * **blockList**: decline a transaction when the conditions are met.\n * **maxUsage**: add the amount or number of transactions for the lifetime of a payment instrument, and then decline a transaction when the specified limits are met.\n * **velocity**: add the amount or number of transactions based on a specified time interval, and then decline a transaction when the specified limits are met.\n',
    )


class TransactionRuleResponse(BaseModel):
    transactionRule: Optional[TransactionRule] = Field(
        None, description='The transaction rule.'
    )


class TransactionRulesResponse(BaseModel):
    transactionRules: Optional[List[TransactionRule]] = Field(
        None, description='List of transaction rules.'
    )


class UpdatePaymentInstrument(BaseModel):
    balanceAccountId: str = Field(
        ...,
        description='The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.',
    )
    bankAccount: Optional[
        Union[IbanAccountIdentification, USLocalAccountIdentification]
    ] = Field(
        None,
        description='Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**.',
    )
    card: Optional[Card] = Field(
        None,
        description='Contains information about the card payment instrument. Returned when you create a payment instrument with `type` **card**.',
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='Your description for the payment instrument, maximum 300 characters.',
    )
    id: str = Field(..., description='The unique identifier of the payment instrument.')
    issuingCountryCode: str = Field(
        ...,
        description='The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.',
    )
    paymentInstrumentGroupId: Optional[str] = Field(
        None,
        description='The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.',
    )
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference for the payment instrument, maximum 150 characters.',
    )
    status: Optional[Status10] = Field(
        None,
        description='The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **inactive**.\n\nPossible values: \n\n * **active**:  The payment instrument is active and can be used to make payments. \n\n * **inactive**: The payment instrument is inactive and cannot be used to make payments. \n\n * **suspended**: The payment instrument is suspended, either because it was stolen or lost. \n\n * **closed**: The payment instrument is permanently closed. This action cannot be undone. \n\n',
    )
    statusComment: Optional[str] = Field(
        None,
        description='Comment for the status of the payment instrument.\n\nRequired if `statusReason` is **other**.',
    )
    statusReason: Optional[StatusReason] = Field(
        None,
        description='The reason for updating the status of the payment instrument.\n\nPossible values: **lost**, **stolen**, **damaged**, **suspectedFraud**, **expired**, **endOfLife**, **accountClosure**, **other**.\nIf the reason is **other**, you must also send the `statusComment` parameter describing the status change.',
    )
    type: Type22 = Field(
        ...,
        description='Type of payment instrument.\n\nPossible value: **card**, **bankAccount**. ',
    )


class AccountHolder(BaseModel):
    balancePlatform: Optional[str] = Field(
        None,
        description='The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.',
    )
    capabilities: Optional[Dict[str, AccountHolderCapability]] = Field(
        None,
        description='Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.',
    )
    contactDetails: Optional[ContactDetails] = Field(
        None, description='Contact details of the account holder.'
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='Your description for the account holder, maximum 300 characters.',
    )
    id: str = Field(..., description='The unique identifier of the account holder.')
    legalEntityId: str = Field(
        ...,
        description='The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.',
    )
    primaryBalanceAccount: Optional[str] = Field(
        None,
        description="The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request.",
    )
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference for the account holder, maximum 150 characters.',
    )
    status: Optional[Status] = Field(
        None,
        description='The status of the account holder.\n\nPossible values: \n\n * **active**: The account holder is active. This is the default status when creating an account holder. \n\n * **inactive (Deprecated)**: The account holder is temporarily inactive due to missing KYC details. You can set the account back to active by providing the missing KYC details. \n\n * **suspended**: The account holder is permanently deactivated by Adyen. This action cannot be undone. \n\n* **closed**: The account holder is permanently deactivated by you. This action cannot be undone.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).',
    )
    verificationDeadlines: Optional[List[VerificationDeadline]] = Field(
        None,
        description='List of verification deadlines and the capabilities that will be disallowed if verification errors are not resolved.',
    )


class PaginatedAccountHoldersResponse(BaseModel):
    accountHolders: List[AccountHolder] = Field(
        ..., description='List of account holders.'
    )
    hasNext: bool = Field(
        ..., description='Indicates whether there are more items on the next page.'
    )
    hasPrevious: bool = Field(
        ..., description='Indicates whether there are more items on the previous page.'
    )


class PaginatedPaymentInstrumentsResponse(BaseModel):
    hasNext: bool = Field(
        ..., description='Indicates whether there are more items on the next page.'
    )
    hasPrevious: bool = Field(
        ..., description='Indicates whether there are more items on the previous page.'
    )
    paymentInstruments: List[PaymentInstrument] = Field(
        ...,
        description='List of payment instruments associated with the balance account.',
    )
