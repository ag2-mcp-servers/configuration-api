# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:01:02+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity, HTTPBasic
from fastapi import Path, Query

from models import (
    AccountHolder,
    AccountHolderInfo,
    BalanceAccount,
    BalanceAccountInfo,
    BalanceAccountUpdateRequest,
    BalancePlatform,
    BalanceSweepConfigurationsResponse,
    BankAccountIdentificationValidationRequest,
    CapitalGrantAccount,
    GrantOffer,
    GrantOffers,
    PaginatedAccountHoldersResponse,
    PaginatedBalanceAccountsResponse,
    PaginatedPaymentInstrumentsResponse,
    PaymentInstrument,
    PaymentInstrumentGroup,
    PaymentInstrumentGroupInfo,
    PaymentInstrumentInfo,
    PaymentInstrumentRevealInfo,
    PaymentInstrumentUpdateRequest,
    RestServiceError,
    SweepConfigurationV2,
    TransactionRule,
    TransactionRuleInfo,
    TransactionRuleResponse,
    TransactionRulesResponse,
    UpdatePaymentInstrument,
    Void,
)

app = MCPProxy(
    contact={
        'email': 'developer-experience@adyen.com',
        'name': 'Adyen Developer Experience team',
        'url': 'https://www.adyen.help/hc/en-us/community/topics',
        'x-twitter': 'Adyen',
    },
    description='The Configuration API enables you to create a platform where you can onboard your users as account holders and create balance accounts, cards, and business accounts.\n\n## Authentication\nYour Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:\n\n ```\ncurl\n-H "Content-Type: application/json" \\\n-H "X-API-Key: YOUR_API_KEY" \\\n...\n```\n\nAlternatively, you can use the username and password to connect to the API using basic authentication. For example:\n\n```\ncurl\n-H "Content-Type: application/json" \\\n-U "ws@BalancePlatform.YOUR_BALANCE_PLATFORM":"YOUR_WS_PASSWORD" \\\n...\n```\n## Versioning\nThe Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.\n\nFor example:\n```\nhttps://balanceplatform-api-test.adyen.com/bcl/v2/accountHolders\n```\n## Going live\nWhen going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v2`.',
    termsOfService='https://www.adyen.com/legal/terms-and-conditions',
    title='Configuration API',
    version='2',
    servers=[{'url': 'https://balanceplatform-api-test.adyen.com/bcl/v2'}],
)


@app.post(
    '/accountHolders',
    description=""" Creates an account holder linked to a [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities).

 """,
    tags=['account_holder_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_account_holders(body: AccountHolderInfo = None):
    """
    Create an account holder
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accountHolders/{id}',
    description=""" Returns an account holder. """,
    tags=['account_holder_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_account_holders_id(id: str):
    """
    Get an account holder
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/accountHolders/{id}',
    description=""" Updates an account holder. When updating an account holder resource, if a parameter is not provided in the request, it is left unchanged. """,
    tags=['account_holder_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def patch_account_holders_id(id: str, body: AccountHolder = None):
    """
    Update an account holder
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accountHolders/{id}/balanceAccounts',
    description=""" Returns a paginated list of the balance accounts associated with an account holder. To fetch multiple pages, use the query parameters. 

For example, to limit the page to 5 balance accounts and skip the first 10, use `/accountHolders/{id}/balanceAccounts?limit=5&offset=10`. """,
    tags=['account_holder_management', 'balance_account_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_account_holders_id_balance_accounts(
    id: str, offset: Optional[int] = None, limit: Optional[int] = None
):
    """
    Get all balance accounts of an account holder
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/balanceAccounts',
    description=""" Creates a balance account that holds the funds of the associated account holder. """,
    tags=['balance_account_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_balance_accounts(body: BalanceAccountInfo = None):
    """
    Create a balance account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/balanceAccounts/{balanceAccountId}/sweeps',
    description=""" Returns a list of the sweeps configured for a balance account.

To fetch multiple pages, use the query parameters. For example, to limit the page to 5 sweeps and to skip the first 10, use `/balanceAccounts/{balanceAccountId}/sweeps?limit=5&offset=10`. """,
    tags=['balance_account_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_balance_accounts_balance_account_id_sweeps(
    balance_account_id: str = Path(..., alias='balanceAccountId'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Get all sweeps for a balance account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/balanceAccounts/{balanceAccountId}/sweeps',
    description=""" Creates a sweep that results in moving funds from or to a balance account.

A sweep pulls in or pushes out funds based on a defined schedule, amount, currency, and a source or a destination. """,
    tags=['balance_account_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_balance_accounts_balance_account_id_sweeps(
    balance_account_id: str = Path(..., alias='balanceAccountId'),
    body: SweepConfigurationV2 = None,
):
    """
    Create a sweep
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}',
    description=""" Deletes a sweep for a balance account. """,
    tags=['balance_account_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def delete_balance_accounts_balance_account_id_sweeps_sweep_id(
    balance_account_id: str = Path(..., alias='balanceAccountId'),
    sweep_id: str = Path(..., alias='sweepId'),
):
    """
    Delete a sweep
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}',
    description=""" Returns a sweep. """,
    tags=['balance_account_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_balance_accounts_balance_account_id_sweeps_sweep_id(
    balance_account_id: str = Path(..., alias='balanceAccountId'),
    sweep_id: str = Path(..., alias='sweepId'),
):
    """
    Get a sweep
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}',
    description=""" Updates a sweep. When updating a sweep resource, note that if a request parameter is not provided, the parameter is left unchanged. """,
    tags=['balance_account_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def patch_balance_accounts_balance_account_id_sweeps_sweep_id(
    balance_account_id: str = Path(..., alias='balanceAccountId'),
    sweep_id: str = Path(..., alias='sweepId'),
    body: SweepConfigurationV2 = None,
):
    """
    Update a sweep
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/balanceAccounts/{id}',
    description=""" Returns a balance account and its balances for the default currency and other currencies with a non-zero balance. """,
    tags=['balance_account_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_balance_accounts_id(id: str):
    """
    Get a balance account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/balanceAccounts/{id}',
    description=""" Updates a balance account. """,
    tags=['balance_account_operations', 'account_holder_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def patch_balance_accounts_id(id: str, body: BalanceAccountUpdateRequest = None):
    """
    Update a balance account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/balanceAccounts/{id}/paymentInstruments',
    description=""" Returns a paginated list of the payment instruments associated with a balance account. 

To fetch multiple pages, use the query parameters.For example, to limit the page to 3 payment instruments and to skip the first 6, use `/balanceAccounts/{id}/paymentInstruments?limit=3&offset=6`. """,
    tags=['balance_account_operations', 'payment_instrument_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_balance_accounts_id_payment_instruments(
    id: str, offset: Optional[int] = None, limit: Optional[int] = None
):
    """
    Get all payment instruments for a balance account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/balancePlatforms/{id}',
    description=""" Returns a balance platform. """,
    tags=['balance_account_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_balance_platforms_id(id: str):
    """
    Get a balance platform
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/balancePlatforms/{id}/accountHolders',
    description=""" Returns a paginated list of all the account holders that belong to the balance platform. To fetch multiple pages, use the query parameters. 

For example, to limit the page to 5 account holders and to skip the first 20, use `/balancePlatforms/{id}/accountHolders?limit=5&offset=20`. """,
    tags=['account_holder_management', 'balance_account_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_balance_platforms_id_account_holders(
    id: str, offset: Optional[int] = None, limit: Optional[int] = None
):
    """
    Get all account holders under a balance platform
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/grantAccounts/{id}',
    description=""" Returns the details of the [grant account](https://docs.adyen.com/marketplaces-and-platforms/capital#grant-account). """,
    tags=['grant_account_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_grant_accounts_id(id: str):
    """
    Get a grant account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/grantOffers',
    description=""" Returns a list of all [grant offers](https://docs.adyen.com/marketplaces-and-platforms/capital#grant-offers) available for `accountHolderId` specified as a query parameter. """,
    tags=['grant_account_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_grant_offers(account_holder_id: str = Query(..., alias='accountHolderId')):
    """
    Get all available grant offers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/grantOffers/{grantOfferId}',
    description=""" Returns the details of a single grant offer. """,
    tags=['grant_account_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_grant_offers_grant_offer_id(
    grant_offer_id: str = Path(..., alias='grantOfferId')
):
    """
    Get a grant offer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/paymentInstrumentGroups',
    description=""" Creates a payment instrument group to associate and group payment instrument resources together. You can apply a transaction rule to a payment instrument group. """,
    tags=['payment_instrument_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payment_instrument_groups(body: PaymentInstrumentGroupInfo = None):
    """
    Create a payment instrument group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/paymentInstrumentGroups/{id}',
    description=""" Returns the details of a payment instrument group. """,
    tags=['payment_instrument_operations', 'transaction_rule_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_payment_instrument_groups_id(id: str):
    """
    Get a payment instrument group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/paymentInstrumentGroups/{id}/transactionRules',
    description=""" Returns a list of all the transaction rules associated with a payment instrument group. """,
    tags=['payment_instrument_operations', 'transaction_rule_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_payment_instrument_groups_id_transaction_rules(id: str):
    """
    Get all transaction rules for a payment instrument group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/paymentInstruments',
    description=""" Creates a payment instrument to issue a physical card, a virtual card, or a business account to your user.

 For more information, refer to [Issue cards](https://docs.adyen.com/issuing/create-cards) or [Issue business accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts). """,
    tags=['payment_instrument_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payment_instruments(body: PaymentInstrumentInfo = None):
    """
    Create a payment instrument
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/paymentInstruments/{id}',
    description=""" Returns the details of a payment instrument. """,
    tags=['payment_instrument_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_payment_instruments_id(id: str):
    """
    Get a payment instrument
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/paymentInstruments/{id}',
    description=""" Updates a payment instrument. Once a payment instrument is already active, you can only update its status. However, for cards created with **inactive** status, you can still update the balance account associated with the card. """,
    tags=['payment_instrument_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def patch_payment_instruments_id(id: str, body: PaymentInstrumentUpdateRequest = None):
    """
    Update a payment instrument
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/paymentInstruments/{id}/reveal',
    description=""" Returns the primary account number (PAN) of a payment instrument.

To make this request, your API credential must have the following [role](https://docs.adyen.com/issuing/manage-access/api-credentials-web-service#api-permissions):

* Balance Platform BCL PCI role """,
    tags=['payment_instrument_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_payment_instruments_id_reveal(id: str):
    """
    Get the PAN of a payment instrument
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/paymentInstruments/{id}/transactionRules',
    description=""" Returns a list of transaction rules associated with a payment instrument. """,
    tags=['payment_instrument_operations', 'transaction_rule_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_payment_instruments_id_transaction_rules(id: str):
    """
    Get all transaction rules for a payment instrument
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/transactionRules',
    description=""" Creates a [transaction rule](https://docs.adyen.com/issuing/transaction-rules). When your user makes a transaction with their Adyen-issued card, the transaction is allowed or declined based on the conditions and outcome defined in the transaction rule. You can apply the transaction rule to several cards, such as all the cards in your platform, or to a specific card. For use cases, see [examples](https://docs.adyen.com/issuing/transaction-rules/examples). """,
    tags=['payment_instrument_operations', 'transaction_rule_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_transaction_rules(body: TransactionRuleInfo = None):
    """
    Create a transaction rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/transactionRules/{transactionRuleId}',
    description=""" Deletes a transaction rule. """,
    tags=['transaction_rule_operations', 'payment_instrument_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def delete_transaction_rules_transaction_rule_id(
    transaction_rule_id: str = Path(..., alias='transactionRuleId')
):
    """
    Delete a transaction rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/transactionRules/{transactionRuleId}',
    description=""" Returns the details of a transaction rule. """,
    tags=['payment_instrument_operations', 'transaction_rule_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_transaction_rules_transaction_rule_id(
    transaction_rule_id: str = Path(..., alias='transactionRuleId')
):
    """
    Get a transaction rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/transactionRules/{transactionRuleId}',
    description=""" Updates a transaction rule. 

* To update only the status of a transaction rule, send only the `status` parameter. All other parameters not provided in the request are left unchanged.

* When updating any other parameter, you need to send all existing resource parameters. If you omit a parameter in the request, that parameter is removed from the resource. """,
    tags=['payment_instrument_operations', 'transaction_rule_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def patch_transaction_rules_transaction_rule_id(
    transaction_rule_id: str = Path(..., alias='transactionRuleId'),
    body: TransactionRuleInfo = None,
):
    """
    Update a transaction rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/validateBankAccountIdentification',
    description=""" Validates bank account identification details. You can use this endpoint to validate bank account details before you [make a transfer](https://docs.adyen.com/api-explorer/transfers/latest/post/transfers) or [create a transfer instrument](https://docs.adyen.com/api-explorer/legalentity/latest/post/transferInstruments). """,
    tags=['bank_account_validation_services'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_validate_bank_account_identification(
    body: BankAccountIdentificationValidationRequest = None,
):
    """
    Validate a bank account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
